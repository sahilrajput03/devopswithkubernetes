apiVersion: v1 # Includes the Service for lazyness
kind: Service
metadata:
  name: postgres-svc
  labels:
    app: my-pongs-app
spec:
  ports:
    - port: 5432
      name: web
  clusterIP: None
  selector:
    app: pongs-postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-ss
spec:
  serviceName: redis-svc
  replicas: 2
  selector:
    matchLabels:
      app: pongs-postgres
  template:
    metadata:
      labels:
        app: pongs-postgres
    spec:
      containers:
        - name: redisfiller
          image: jakousa/dwk-app5:54203329200143875187753026f4e93a1305ae26
        - name: db
          image: postgres:10-alpine
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_URL
              value: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnBhc3N3MHJkQHBvc3RncmVzLXByb2plY3Qtc3ZjOjU0MzIvcG9zdGdyZXM
            # value: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnBhc3N3MHJkQHBvc3RncmVzLXByb2plY3Qtc3ZjOjU0MzIvcG9zdGdyZXM=
            # db setup requires the passw0rd the rest stays default (user/db: 'postgres')
            - name: POSTGRES_PASSWORD
              value: cGFzc3cwcmQ=
          # temporarily setting secrets directly!!^^^
          # envFrom:
          #   - secretRef:
          #       name: postgres-pw-url
          ports:
            - name: db
              containerPort: 5432
          volumeMounts:
            # mountpoint to store pg data
            - name: postgres-project-data
              mountPath: /var/lib/postgresql/data/pgdata
  volumeClaimTemplates:
    - metadata:
        name: postgres-project-data
      spec:
        accessModes: ['ReadWriteOnce']
        storageClassName: local-path
        resources:
          requests:
            storage: 1Gi
